// Code generated by "go-enum -type PrintLanguage -trimprefix PrintLanguage"; DO NOT EDIT.

package printing

import (
	"database/sql"
	"database/sql/driver"
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[invalidLanguage-0]
	_ = x[PrintLanguagePCL-1]
	_ = x[PrintLanguagePDF-2]
	_ = x[PrintLanguagePostScript-3]
}

const _PrintLanguage_name = "invalidLanguagePCLPDFPostScript"

var _PrintLanguage_index = [...]uint8{0, 15, 18, 21, 31}

func _() {
	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_PrintLanguage_value
}

func (i PrintLanguage) String() string {
	if i < 0 || i >= PrintLanguage(len(_PrintLanguage_index)-1) {
		return "PrintLanguage(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrintLanguage_name[_PrintLanguage_index[i]:_PrintLanguage_index[i+1]]
}

var _PrintLanguage_values = []PrintLanguage{0, 1, 2, 3}

var _PrintLanguage_name_to_values = map[string]PrintLanguage{
	_PrintLanguage_name[0:15]:  0,
	_PrintLanguage_name[15:18]: 1,
	_PrintLanguage_name[18:21]: 2,
	_PrintLanguage_name[21:31]: 3,
}

// ParsePrintLanguageString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParsePrintLanguageString(s string) (PrintLanguage, error) {
	if val, ok := _PrintLanguage_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%[1]s does not belong to PrintLanguage values", s)
}

// PrintLanguageValues returns all values of the enum
func PrintLanguageValues() []PrintLanguage {
	return _PrintLanguage_values
}

// IsAPrintLanguage returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PrintLanguage) Registered() bool {
	for _, v := range _PrintLanguage_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_PrintLanguage_value

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_PrintLanguage_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for PrintLanguage
func (i PrintLanguage) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for PrintLanguage
func (i *PrintLanguage) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParsePrintLanguageString(string(data))
	return err
}

func _() {
	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_PrintLanguage_value

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_PrintLanguage_value
}

// MarshalJSON implements the json.Marshaler interface for PrintLanguage
func (i PrintLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PrintLanguage
func (i *PrintLanguage) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PrintLanguage should be a string, got %[1]s", data)
	}

	var err error
	*i, err = ParsePrintLanguageString(s)
	return err
}

func _() {
	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_PrintLanguage_value

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_PrintLanguage_value
}

// MarshalText implements the encoding.TextMarshaler interface for PrintLanguage
func (i PrintLanguage) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for PrintLanguage
func (i *PrintLanguage) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParsePrintLanguageString(string(text))
	return err
}

//func _() {
//	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()
//
//	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_PrintLanguage_value
//
//	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_PrintLanguage_value
//}

// MarshalYAML implements a YAML Marshaler for PrintLanguage
func (i PrintLanguage) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for PrintLanguage
func (i *PrintLanguage) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParsePrintLanguageString(s)
	return err
}

func _() {
	var _nil_PrintLanguage_value = func() (val PrintLanguage) { return }()

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type driver.Valuer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ driver.Valuer = _nil_PrintLanguage_value

	// An "cannot convert PrintLanguage literal (type PrintLanguage) to type sql.Scanner" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ sql.Scanner = &_nil_PrintLanguage_value
}

func (i PrintLanguage) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *PrintLanguage) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ParsePrintLanguageString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}

// PrintLanguageSliceContains reports whether sunEnums is within enums.
func PrintLanguageSliceContains(enums []PrintLanguage, sunEnums ...PrintLanguage) bool {
	var seenEnums = map[PrintLanguage]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// PrintLanguageSliceContainsAny reports whether any sunEnum is within enums.
func PrintLanguageSliceContainsAny(enums []PrintLanguage, sunEnums ...PrintLanguage) bool {
	var seenEnums = map[PrintLanguage]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
